blueprint:
  name: Cat Cam Motion → LLM → Multi-Notify (in-app open, /media)
  domain: automation
  description: >
    On motion, wait for Ring eventId, download the clip to /media, analyze with LLMVision,
    then notify multiple recipients (loop) with a keyframe image and a tap-to-play video
    that opens INSIDE the HA app (uses 'path', not external browser).

  input:
    motion_binary_sensor:
      name: Motion Binary Sensor
      selector:
        entity:
          domain: binary_sensor

    event_select:
      name: Event Select (Ring)
      selector:
        entity:
          domain: select

    notify_devices:
      name: Recipients (mobile_app devices)
      selector:
        device:
          multiple: true
          filter:
            - integration: mobile_app

    provider_id:
      name: LLMVision Provider
      description: Select the llmvision provider to use.
      selector:
        config_entry:
          integration: llmvision

    subdir:
      name: Download Subdirectory
      description: Subfolder under /media/local/ring_cams where videos will be saved.
      default: cc
      selector:
        text: {}

    cooldown_minutes:
      name: Cooldown (minutes)
      default: 10
      selector:
        number:
          min: 0
          max: 120
          mode: slider
          unit_of_measurement: min

mode: single

# ---- Global variables ----
variables:
  event_select_entity: !input event_select
  provider: !input provider_id
  subdir: !input subdir

  # Save to /config/media so LLM Vision works; HA serves as /media/local/...
  tstamp: "{{ now().strftime('%Y%m%dT%H%M%S') }}"
  filename: "{{ tstamp ~ '_motion.mp4' }}"
  download_base: /config/media/ring_cams
  absolute_path: "{{ download_base ~ '/' ~ subdir ~ '/' ~ filename }}"

trigger:
  - platform: state
    entity_id: !input motion_binary_sensor
    to: "on"

action:
  - alias: Wait for EventId to Change
    wait_for_trigger:
      - platform: state
        entity_id: !input event_select
        attribute: eventId
    timeout: "00:05"

  # Precompute plain strings
  - alias: Build Downloader Vars
    variables:
      recording_url: "{{ state_attr(event_select_entity, 'recordingUrl') | string }}"
      subdir_str: "{{ subdir | string }}"
      filename_str: "{{ filename | string }}"

  - alias: Download Video from Ring
    service: downloader.download_file
    data:
      overwrite: false
      url: "{{ recording_url }}"
      subdir: "{{ subdir_str }}"
      filename: "{{ filename_str }}"

  - delay: "00:00:02"

  - alias: Prep Analyzer Vars
    variables:
      provider_str: "{{ provider | string }}"
      absolute_path_str: "{{ absolute_path | string }}"

  - alias: Analyze Video
    service: llmvision.video_analyzer
    response_variable: response
    data:
      remember: true
      frigate_retry_attempts: 2
      frigate_retry_seconds: 1
      max_frames: 3
      include_filename: false
      target_width: 1280
      max_tokens: 1000
      generate_title: true
      expose_images: true
      provider: "{{ provider_str }}"
      video_file: "{{ absolute_path_str }}"
      message: >
        Summarize the events based on a series of images captured at short intervals.
        Focus only on moving subjects such as people, vehicles, and other active elements.
        Ignore static objects and scenery. Provide a clear and concise account of movements
        and interactions. Do not mention or imply the existence of images—present the
        information as if directly observing the events. If no movement is detected,
        respond with: 'No activity observed. The response must be less than 255 characters.'

  # Prepare notification vars (stay on /media; use 'path' to open in app)
  - alias: Build Notification Vars
    variables:
      device_list: !input notify_devices

      # Keyframe path -> relative web path the app can fetch via auth
      keyframe_rel: >-
        {% set p = (response.key_frame | default('')) %}
        {% if p.startswith('/config/media/') %}
          {{ p.replace('/config/media/', '/media/local/') }}
        {% elif p.startswith('/config/www/') %}
          {{ p.replace('/config/www/', '/local/') }}
        {% else %}
          {{ p.replace('/config','') }}
        {% endif %}

      # Video is under /config/media/ring_cams/... -> served at /media/local/ring_cams/...
      video_rel: "{{ absolute_path | replace('/config/media/','/media/local/') }}"

      message_text: "{{ response.response_text | default('No activity observed.') }}"

  # Notify each device using its mobile_app service; open INSIDE app using 'path'
  - alias: Send Notification to Each Recipient
    repeat:
      for_each: "{{ device_list }}"
      sequence:
        - alias: Build per-device notify service name
          variables:
            service_name: >-
              {{ 'notify.mobile_app_' ~ (device_attr(repeat.item, 'name') | slugify) }}

        - alias: Send to device
          service: "{{ service_name }}"
          data:
            title: Motion Detected at Cat Cam
            message: "{{ message_text }}"
            data:
              # Show keyframe; fetched via app session (auth-safe)
              image: "{{ keyframe_rel }}"
              # Force in-app open using the 'path' key (no external browser)
              path: "{{ video_rel }}"

  - alias: Cooldown Before Retrigger
    delay:
      minutes: !input cooldown_minutes
